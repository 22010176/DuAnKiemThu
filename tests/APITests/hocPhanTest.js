import http from 'k6/http';
import { check, sleep } from 'k6';

export let options = {
  vus: 50,
  duration: '20s',
  thresholds: {
    http_req_duration: ['p(95)<2000'],
    http_req_failed: ['rate<0.02'],
  },
};

const BASE_URL = 'http://localhost:5249/HocPhan';

// üëá Thay b·∫±ng ID th·∫≠t c·ªßa Khoa (ƒë√£ t·ªìn t·∫°i)
const EXISTING_KHOA_ID = 'e93691e4-7b24-488b-8ccf-7668d3aae9ed';

export default function () {
  // 1. GET t·∫•t c·∫£ h·ªçc ph·∫ßn
  const getAllRes = http.get(BASE_URL);
  check(getAllRes, {
    'GET /HocPhan tr·∫£ v·ªÅ 200': (r) => r.status === 200,
  });

  // 2. POST t·∫°o h·ªçc ph·∫ßn m·ªõi
  const maHocPhan = `HP${__VU}_${__ITER}_${Math.floor(Math.random() * 1000)}`;
  const payload = JSON.stringify({
    maHocPhan,
    tenHocPhan: `H·ªçc ph·∫ßn K6 ${maHocPhan}`,
    heSoHocPhan: 2,
    soTinChi: 3,
    soTiet: 45,
    khoaId: EXISTING_KHOA_ID,
  });
  const headers = { 'Content-Type': 'application/json' };
  const postRes = http.post(BASE_URL, payload, { headers });

  check(postRes, {
    'POST /HocPhan tr·∫£ v·ªÅ 201': (r) => r.status === 201,
  });

  if (postRes.status !== 201) {
    console.warn(`‚ùå POST th·∫•t b·∫°i: ${postRes.status}, body: ${postRes.body}`);
    return;
  }

  // üîÅ Ch·ªù DB c·∫≠p nh·∫≠t r·ªìi m·ªõi truy v·∫•n l·∫°i
  sleep(0.5);

  // 3. GET ƒë·ªÉ t√¨m l·∫°i h·ªçc ph·∫ßn v·ª´a t·∫°o
  const getAfterPost = http.get(BASE_URL);
  let createdItem;
  try {
    const hpList = getAfterPost.json();
    createdItem = hpList.find(hp => hp.MaHocPhan === maHocPhan);
  } catch (err) {
    console.warn(`‚ùå L·ªói JSON parse t·ª´ GET sau POST: ${getAfterPost.body}`);
    return;
  }

  if (!createdItem) {
    console.warn(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y h·ªçc ph·∫ßn v·ª´a t·∫°o v·ªõi m√£: ${maHocPhan}`);
    return;
  }

  const id = createdItem.Id;

  // 4. PUT s·ª≠a h·ªçc ph·∫ßn
  const putPayload = JSON.stringify({
    tenHocPhan: `H·ªçc ph·∫ßn s·ª≠a ${maHocPhan}`,
    heSoHocPhan: 3,
    soTinChi: 4,
    soTiet: 60,
    khoaId: EXISTING_KHOA_ID,
  });
  const putRes = http.put(`${BASE_URL}/sua-hoc-phan/${id}`, putPayload, { headers });

  check(putRes, {
    'PUT /HocPhan/sua-hoc-phan tr·∫£ v·ªÅ 200': (r) => r.status === 200,
  });

  if (putRes.status !== 200) {
    console.warn(`‚ùå PUT th·∫•t b·∫°i: ${putRes.status}, body: ${putRes.body}`);
    return;
  }

  // 5. DELETE h·ªçc ph·∫ßn
  const delRes = http.del(`${BASE_URL}?id=${id}`);
  check(delRes, {
    'DELETE /HocPhan?id= tr·∫£ v·ªÅ 200': (r) => r.status === 200,
  });

  if (delRes.status !== 200) {
    console.warn(`‚ùå DELETE th·∫•t b·∫°i: ${delRes.status}, body: ${delRes.body}`);
  }

  sleep(1);
}
